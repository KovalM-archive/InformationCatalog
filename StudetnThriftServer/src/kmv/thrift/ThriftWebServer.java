/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kmv.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftWebServer {

  public interface Iface {

    public void addStudent(List<String> studentModel) throws org.apache.thrift.TException;

    public void removeStudent(List<String> studentModel) throws org.apache.thrift.TException;

    public boolean updateStudent(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException;

    public List<List<String>> findStudents(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException;

    public void findRemoveStudents(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException;

    public int getStudentCount() throws org.apache.thrift.TException;

    public List<String> getStudentAtIndex(int index) throws org.apache.thrift.TException;

    public void saveChanges() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addStudent(List<String> studentModel, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addStudent_call> resultHandler) throws org.apache.thrift.TException;

    public void removeStudent(List<String> studentModel, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeStudent_call> resultHandler) throws org.apache.thrift.TException;

    public void updateStudent(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateStudent_call> resultHandler) throws org.apache.thrift.TException;

    public void findStudents(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findStudents_call> resultHandler) throws org.apache.thrift.TException;

    public void findRemoveStudents(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findRemoveStudents_call> resultHandler) throws org.apache.thrift.TException;

    public void getStudentCount(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStudentCount_call> resultHandler) throws org.apache.thrift.TException;

    public void getStudentAtIndex(int index, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStudentAtIndex_call> resultHandler) throws org.apache.thrift.TException;

    public void saveChanges(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveChanges_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addStudent(List<String> studentModel) throws org.apache.thrift.TException
    {
      send_addStudent(studentModel);
      recv_addStudent();
    }

    public void send_addStudent(List<String> studentModel) throws org.apache.thrift.TException
    {
      addStudent_args args = new addStudent_args();
      args.setStudentModel(studentModel);
      sendBase("addStudent", args);
    }

    public void recv_addStudent() throws org.apache.thrift.TException
    {
      addStudent_result result = new addStudent_result();
      receiveBase(result, "addStudent");
      return;
    }

    public void removeStudent(List<String> studentModel) throws org.apache.thrift.TException
    {
      send_removeStudent(studentModel);
      recv_removeStudent();
    }

    public void send_removeStudent(List<String> studentModel) throws org.apache.thrift.TException
    {
      removeStudent_args args = new removeStudent_args();
      args.setStudentModel(studentModel);
      sendBase("removeStudent", args);
    }

    public void recv_removeStudent() throws org.apache.thrift.TException
    {
      removeStudent_result result = new removeStudent_result();
      receiveBase(result, "removeStudent");
      return;
    }

    public boolean updateStudent(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException
    {
      send_updateStudent(studentTerms, studentTermsFlags);
      return recv_updateStudent();
    }

    public void send_updateStudent(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException
    {
      updateStudent_args args = new updateStudent_args();
      args.setStudentTerms(studentTerms);
      args.setStudentTermsFlags(studentTermsFlags);
      sendBase("updateStudent", args);
    }

    public boolean recv_updateStudent() throws org.apache.thrift.TException
    {
      updateStudent_result result = new updateStudent_result();
      receiveBase(result, "updateStudent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStudent failed: unknown result");
    }

    public List<List<String>> findStudents(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException
    {
      send_findStudents(studentTerms, studentTermsFlags);
      return recv_findStudents();
    }

    public void send_findStudents(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException
    {
      findStudents_args args = new findStudents_args();
      args.setStudentTerms(studentTerms);
      args.setStudentTermsFlags(studentTermsFlags);
      sendBase("findStudents", args);
    }

    public List<List<String>> recv_findStudents() throws org.apache.thrift.TException
    {
      findStudents_result result = new findStudents_result();
      receiveBase(result, "findStudents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findStudents failed: unknown result");
    }

    public void findRemoveStudents(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException
    {
      send_findRemoveStudents(studentTerms, studentTermsFlags);
      recv_findRemoveStudents();
    }

    public void send_findRemoveStudents(List<String> studentTerms, List<Boolean> studentTermsFlags) throws org.apache.thrift.TException
    {
      findRemoveStudents_args args = new findRemoveStudents_args();
      args.setStudentTerms(studentTerms);
      args.setStudentTermsFlags(studentTermsFlags);
      sendBase("findRemoveStudents", args);
    }

    public void recv_findRemoveStudents() throws org.apache.thrift.TException
    {
      findRemoveStudents_result result = new findRemoveStudents_result();
      receiveBase(result, "findRemoveStudents");
      return;
    }

    public int getStudentCount() throws org.apache.thrift.TException
    {
      send_getStudentCount();
      return recv_getStudentCount();
    }

    public void send_getStudentCount() throws org.apache.thrift.TException
    {
      getStudentCount_args args = new getStudentCount_args();
      sendBase("getStudentCount", args);
    }

    public int recv_getStudentCount() throws org.apache.thrift.TException
    {
      getStudentCount_result result = new getStudentCount_result();
      receiveBase(result, "getStudentCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStudentCount failed: unknown result");
    }

    public List<String> getStudentAtIndex(int index) throws org.apache.thrift.TException
    {
      send_getStudentAtIndex(index);
      return recv_getStudentAtIndex();
    }

    public void send_getStudentAtIndex(int index) throws org.apache.thrift.TException
    {
      getStudentAtIndex_args args = new getStudentAtIndex_args();
      args.setIndex(index);
      sendBase("getStudentAtIndex", args);
    }

    public List<String> recv_getStudentAtIndex() throws org.apache.thrift.TException
    {
      getStudentAtIndex_result result = new getStudentAtIndex_result();
      receiveBase(result, "getStudentAtIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStudentAtIndex failed: unknown result");
    }

    public void saveChanges() throws org.apache.thrift.TException
    {
      send_saveChanges();
      recv_saveChanges();
    }

    public void send_saveChanges() throws org.apache.thrift.TException
    {
      saveChanges_args args = new saveChanges_args();
      sendBase("saveChanges", args);
    }

    public void recv_saveChanges() throws org.apache.thrift.TException
    {
      saveChanges_result result = new saveChanges_result();
      receiveBase(result, "saveChanges");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addStudent(List<String> studentModel, org.apache.thrift.async.AsyncMethodCallback<addStudent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addStudent_call method_call = new addStudent_call(studentModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> studentModel;
      public addStudent_call(List<String> studentModel, org.apache.thrift.async.AsyncMethodCallback<addStudent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentModel = studentModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addStudent_args args = new addStudent_args();
        args.setStudentModel(studentModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addStudent();
      }
    }

    public void removeStudent(List<String> studentModel, org.apache.thrift.async.AsyncMethodCallback<removeStudent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeStudent_call method_call = new removeStudent_call(studentModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> studentModel;
      public removeStudent_call(List<String> studentModel, org.apache.thrift.async.AsyncMethodCallback<removeStudent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentModel = studentModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeStudent_args args = new removeStudent_args();
        args.setStudentModel(studentModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeStudent();
      }
    }

    public void updateStudent(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<updateStudent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStudent_call method_call = new updateStudent_call(studentTerms, studentTermsFlags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> studentTerms;
      private List<Boolean> studentTermsFlags;
      public updateStudent_call(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<updateStudent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentTerms = studentTerms;
        this.studentTermsFlags = studentTermsFlags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStudent_args args = new updateStudent_args();
        args.setStudentTerms(studentTerms);
        args.setStudentTermsFlags(studentTermsFlags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStudent();
      }
    }

    public void findStudents(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<findStudents_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findStudents_call method_call = new findStudents_call(studentTerms, studentTermsFlags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findStudents_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> studentTerms;
      private List<Boolean> studentTermsFlags;
      public findStudents_call(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<findStudents_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentTerms = studentTerms;
        this.studentTermsFlags = studentTermsFlags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findStudents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findStudents_args args = new findStudents_args();
        args.setStudentTerms(studentTerms);
        args.setStudentTermsFlags(studentTermsFlags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findStudents();
      }
    }

    public void findRemoveStudents(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<findRemoveStudents_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRemoveStudents_call method_call = new findRemoveStudents_call(studentTerms, studentTermsFlags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRemoveStudents_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> studentTerms;
      private List<Boolean> studentTermsFlags;
      public findRemoveStudents_call(List<String> studentTerms, List<Boolean> studentTermsFlags, org.apache.thrift.async.AsyncMethodCallback<findRemoveStudents_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentTerms = studentTerms;
        this.studentTermsFlags = studentTermsFlags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRemoveStudents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRemoveStudents_args args = new findRemoveStudents_args();
        args.setStudentTerms(studentTerms);
        args.setStudentTermsFlags(studentTermsFlags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_findRemoveStudents();
      }
    }

    public void getStudentCount(org.apache.thrift.async.AsyncMethodCallback<getStudentCount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStudentCount_call method_call = new getStudentCount_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStudentCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getStudentCount_call(org.apache.thrift.async.AsyncMethodCallback<getStudentCount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStudentCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStudentCount_args args = new getStudentCount_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStudentCount();
      }
    }

    public void getStudentAtIndex(int index, org.apache.thrift.async.AsyncMethodCallback<getStudentAtIndex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStudentAtIndex_call method_call = new getStudentAtIndex_call(index, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStudentAtIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int index;
      public getStudentAtIndex_call(int index, org.apache.thrift.async.AsyncMethodCallback<getStudentAtIndex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.index = index;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStudentAtIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStudentAtIndex_args args = new getStudentAtIndex_args();
        args.setIndex(index);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStudentAtIndex();
      }
    }

    public void saveChanges(org.apache.thrift.async.AsyncMethodCallback<saveChanges_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveChanges_call method_call = new saveChanges_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveChanges_call extends org.apache.thrift.async.TAsyncMethodCall {
      public saveChanges_call(org.apache.thrift.async.AsyncMethodCallback<saveChanges_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveChanges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveChanges_args args = new saveChanges_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveChanges();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addStudent", new addStudent());
      processMap.put("removeStudent", new removeStudent());
      processMap.put("updateStudent", new updateStudent());
      processMap.put("findStudents", new findStudents());
      processMap.put("findRemoveStudents", new findRemoveStudents());
      processMap.put("getStudentCount", new getStudentCount());
      processMap.put("getStudentAtIndex", new getStudentAtIndex());
      processMap.put("saveChanges", new saveChanges());
      return processMap;
    }

    public static class addStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStudent_args> {
      public addStudent() {
        super("addStudent");
      }

      public addStudent_args getEmptyArgsInstance() {
        return new addStudent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addStudent_result getResult(I iface, addStudent_args args) throws org.apache.thrift.TException {
        addStudent_result result = new addStudent_result();
        iface.addStudent(args.studentModel);
        return result;
      }
    }

    public static class removeStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeStudent_args> {
      public removeStudent() {
        super("removeStudent");
      }

      public removeStudent_args getEmptyArgsInstance() {
        return new removeStudent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeStudent_result getResult(I iface, removeStudent_args args) throws org.apache.thrift.TException {
        removeStudent_result result = new removeStudent_result();
        iface.removeStudent(args.studentModel);
        return result;
      }
    }

    public static class updateStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStudent_args> {
      public updateStudent() {
        super("updateStudent");
      }

      public updateStudent_args getEmptyArgsInstance() {
        return new updateStudent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStudent_result getResult(I iface, updateStudent_args args) throws org.apache.thrift.TException {
        updateStudent_result result = new updateStudent_result();
        result.success = iface.updateStudent(args.studentTerms, args.studentTermsFlags);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findStudents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findStudents_args> {
      public findStudents() {
        super("findStudents");
      }

      public findStudents_args getEmptyArgsInstance() {
        return new findStudents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findStudents_result getResult(I iface, findStudents_args args) throws org.apache.thrift.TException {
        findStudents_result result = new findStudents_result();
        result.success = iface.findStudents(args.studentTerms, args.studentTermsFlags);
        return result;
      }
    }

    public static class findRemoveStudents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRemoveStudents_args> {
      public findRemoveStudents() {
        super("findRemoveStudents");
      }

      public findRemoveStudents_args getEmptyArgsInstance() {
        return new findRemoveStudents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findRemoveStudents_result getResult(I iface, findRemoveStudents_args args) throws org.apache.thrift.TException {
        findRemoveStudents_result result = new findRemoveStudents_result();
        iface.findRemoveStudents(args.studentTerms, args.studentTermsFlags);
        return result;
      }
    }

    public static class getStudentCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStudentCount_args> {
      public getStudentCount() {
        super("getStudentCount");
      }

      public getStudentCount_args getEmptyArgsInstance() {
        return new getStudentCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStudentCount_result getResult(I iface, getStudentCount_args args) throws org.apache.thrift.TException {
        getStudentCount_result result = new getStudentCount_result();
        result.success = iface.getStudentCount();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getStudentAtIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStudentAtIndex_args> {
      public getStudentAtIndex() {
        super("getStudentAtIndex");
      }

      public getStudentAtIndex_args getEmptyArgsInstance() {
        return new getStudentAtIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStudentAtIndex_result getResult(I iface, getStudentAtIndex_args args) throws org.apache.thrift.TException {
        getStudentAtIndex_result result = new getStudentAtIndex_result();
        result.success = iface.getStudentAtIndex(args.index);
        return result;
      }
    }

    public static class saveChanges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveChanges_args> {
      public saveChanges() {
        super("saveChanges");
      }

      public saveChanges_args getEmptyArgsInstance() {
        return new saveChanges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveChanges_result getResult(I iface, saveChanges_args args) throws org.apache.thrift.TException {
        saveChanges_result result = new saveChanges_result();
        iface.saveChanges();
        return result;
      }
    }

  }

  public static class addStudent_args implements org.apache.thrift.TBase<addStudent_args, addStudent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("studentModel", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStudent_argsTupleSchemeFactory());
    }

    public List<String> studentModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_MODEL((short)1, "studentModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_MODEL
            return STUDENT_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_MODEL, new org.apache.thrift.meta_data.FieldMetaData("studentModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStudent_args.class, metaDataMap);
    }

    public addStudent_args() {
    }

    public addStudent_args(
      List<String> studentModel)
    {
      this();
      this.studentModel = studentModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStudent_args(addStudent_args other) {
      if (other.isSetStudentModel()) {
        List<String> __this__studentModel = new ArrayList<String>();
        for (String other_element : other.studentModel) {
          __this__studentModel.add(other_element);
        }
        this.studentModel = __this__studentModel;
      }
    }

    public addStudent_args deepCopy() {
      return new addStudent_args(this);
    }

    @Override
    public void clear() {
      this.studentModel = null;
    }

    public int getStudentModelSize() {
      return (this.studentModel == null) ? 0 : this.studentModel.size();
    }

    public java.util.Iterator<String> getStudentModelIterator() {
      return (this.studentModel == null) ? null : this.studentModel.iterator();
    }

    public void addToStudentModel(String elem) {
      if (this.studentModel == null) {
        this.studentModel = new ArrayList<String>();
      }
      this.studentModel.add(elem);
    }

    public List<String> getStudentModel() {
      return this.studentModel;
    }

    public addStudent_args setStudentModel(List<String> studentModel) {
      this.studentModel = studentModel;
      return this;
    }

    public void unsetStudentModel() {
      this.studentModel = null;
    }

    /** Returns true if field studentModel is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentModel() {
      return this.studentModel != null;
    }

    public void setStudentModelIsSet(boolean value) {
      if (!value) {
        this.studentModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_MODEL:
        if (value == null) {
          unsetStudentModel();
        } else {
          setStudentModel((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_MODEL:
        return getStudentModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_MODEL:
        return isSetStudentModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStudent_args)
        return this.equals((addStudent_args)that);
      return false;
    }

    public boolean equals(addStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentModel = true && this.isSetStudentModel();
      boolean that_present_studentModel = true && that.isSetStudentModel();
      if (this_present_studentModel || that_present_studentModel) {
        if (!(this_present_studentModel && that_present_studentModel))
          return false;
        if (!this.studentModel.equals(that.studentModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addStudent_args typedOther = (addStudent_args)other;

      lastComparison = Boolean.valueOf(isSetStudentModel()).compareTo(typedOther.isSetStudentModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentModel, typedOther.studentModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStudent_args(");
      boolean first = true;

      sb.append("studentModel:");
      if (this.studentModel == null) {
        sb.append("null");
      } else {
        sb.append(this.studentModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStudent_argsStandardSchemeFactory implements SchemeFactory {
      public addStudent_argsStandardScheme getScheme() {
        return new addStudent_argsStandardScheme();
      }
    }

    private static class addStudent_argsStandardScheme extends StandardScheme<addStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.studentModel = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.studentModel.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setStudentModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentModel != null) {
          oprot.writeFieldBegin(STUDENT_MODEL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.studentModel.size()));
            for (String _iter3 : struct.studentModel)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStudent_argsTupleSchemeFactory implements SchemeFactory {
      public addStudent_argsTupleScheme getScheme() {
        return new addStudent_argsTupleScheme();
      }
    }

    private static class addStudent_argsTupleScheme extends TupleScheme<addStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStudentModel()) {
          {
            oprot.writeI32(struct.studentModel.size());
            for (String _iter4 : struct.studentModel)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.studentModel = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.studentModel.add(_elem7);
            }
          }
          struct.setStudentModelIsSet(true);
        }
      }
    }

  }

  public static class addStudent_result implements org.apache.thrift.TBase<addStudent_result, addStudent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStudent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStudent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStudent_result.class, metaDataMap);
    }

    public addStudent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStudent_result(addStudent_result other) {
    }

    public addStudent_result deepCopy() {
      return new addStudent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStudent_result)
        return this.equals((addStudent_result)that);
      return false;
    }

    public boolean equals(addStudent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addStudent_result typedOther = (addStudent_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStudent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStudent_resultStandardSchemeFactory implements SchemeFactory {
      public addStudent_resultStandardScheme getScheme() {
        return new addStudent_resultStandardScheme();
      }
    }

    private static class addStudent_resultStandardScheme extends StandardScheme<addStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStudent_resultTupleSchemeFactory implements SchemeFactory {
      public addStudent_resultTupleScheme getScheme() {
        return new addStudent_resultTupleScheme();
      }
    }

    private static class addStudent_resultTupleScheme extends TupleScheme<addStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeStudent_args implements org.apache.thrift.TBase<removeStudent_args, removeStudent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("studentModel", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeStudent_argsTupleSchemeFactory());
    }

    public List<String> studentModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_MODEL((short)1, "studentModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_MODEL
            return STUDENT_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_MODEL, new org.apache.thrift.meta_data.FieldMetaData("studentModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeStudent_args.class, metaDataMap);
    }

    public removeStudent_args() {
    }

    public removeStudent_args(
      List<String> studentModel)
    {
      this();
      this.studentModel = studentModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeStudent_args(removeStudent_args other) {
      if (other.isSetStudentModel()) {
        List<String> __this__studentModel = new ArrayList<String>();
        for (String other_element : other.studentModel) {
          __this__studentModel.add(other_element);
        }
        this.studentModel = __this__studentModel;
      }
    }

    public removeStudent_args deepCopy() {
      return new removeStudent_args(this);
    }

    @Override
    public void clear() {
      this.studentModel = null;
    }

    public int getStudentModelSize() {
      return (this.studentModel == null) ? 0 : this.studentModel.size();
    }

    public java.util.Iterator<String> getStudentModelIterator() {
      return (this.studentModel == null) ? null : this.studentModel.iterator();
    }

    public void addToStudentModel(String elem) {
      if (this.studentModel == null) {
        this.studentModel = new ArrayList<String>();
      }
      this.studentModel.add(elem);
    }

    public List<String> getStudentModel() {
      return this.studentModel;
    }

    public removeStudent_args setStudentModel(List<String> studentModel) {
      this.studentModel = studentModel;
      return this;
    }

    public void unsetStudentModel() {
      this.studentModel = null;
    }

    /** Returns true if field studentModel is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentModel() {
      return this.studentModel != null;
    }

    public void setStudentModelIsSet(boolean value) {
      if (!value) {
        this.studentModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_MODEL:
        if (value == null) {
          unsetStudentModel();
        } else {
          setStudentModel((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_MODEL:
        return getStudentModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_MODEL:
        return isSetStudentModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeStudent_args)
        return this.equals((removeStudent_args)that);
      return false;
    }

    public boolean equals(removeStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentModel = true && this.isSetStudentModel();
      boolean that_present_studentModel = true && that.isSetStudentModel();
      if (this_present_studentModel || that_present_studentModel) {
        if (!(this_present_studentModel && that_present_studentModel))
          return false;
        if (!this.studentModel.equals(that.studentModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeStudent_args typedOther = (removeStudent_args)other;

      lastComparison = Boolean.valueOf(isSetStudentModel()).compareTo(typedOther.isSetStudentModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentModel, typedOther.studentModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeStudent_args(");
      boolean first = true;

      sb.append("studentModel:");
      if (this.studentModel == null) {
        sb.append("null");
      } else {
        sb.append(this.studentModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeStudent_argsStandardSchemeFactory implements SchemeFactory {
      public removeStudent_argsStandardScheme getScheme() {
        return new removeStudent_argsStandardScheme();
      }
    }

    private static class removeStudent_argsStandardScheme extends StandardScheme<removeStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.studentModel = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.studentModel.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setStudentModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentModel != null) {
          oprot.writeFieldBegin(STUDENT_MODEL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.studentModel.size()));
            for (String _iter11 : struct.studentModel)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeStudent_argsTupleSchemeFactory implements SchemeFactory {
      public removeStudent_argsTupleScheme getScheme() {
        return new removeStudent_argsTupleScheme();
      }
    }

    private static class removeStudent_argsTupleScheme extends TupleScheme<removeStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStudentModel()) {
          {
            oprot.writeI32(struct.studentModel.size());
            for (String _iter12 : struct.studentModel)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.studentModel = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.studentModel.add(_elem15);
            }
          }
          struct.setStudentModelIsSet(true);
        }
      }
    }

  }

  public static class removeStudent_result implements org.apache.thrift.TBase<removeStudent_result, removeStudent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeStudent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeStudent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeStudent_result.class, metaDataMap);
    }

    public removeStudent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeStudent_result(removeStudent_result other) {
    }

    public removeStudent_result deepCopy() {
      return new removeStudent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeStudent_result)
        return this.equals((removeStudent_result)that);
      return false;
    }

    public boolean equals(removeStudent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeStudent_result typedOther = (removeStudent_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeStudent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeStudent_resultStandardSchemeFactory implements SchemeFactory {
      public removeStudent_resultStandardScheme getScheme() {
        return new removeStudent_resultStandardScheme();
      }
    }

    private static class removeStudent_resultStandardScheme extends StandardScheme<removeStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeStudent_resultTupleSchemeFactory implements SchemeFactory {
      public removeStudent_resultTupleScheme getScheme() {
        return new removeStudent_resultTupleScheme();
      }
    }

    private static class removeStudent_resultTupleScheme extends TupleScheme<removeStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateStudent_args implements org.apache.thrift.TBase<updateStudent_args, updateStudent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("studentTerms", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField STUDENT_TERMS_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("studentTermsFlags", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStudent_argsTupleSchemeFactory());
    }

    public List<String> studentTerms; // required
    public List<Boolean> studentTermsFlags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_TERMS((short)1, "studentTerms"),
      STUDENT_TERMS_FLAGS((short)2, "studentTermsFlags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_TERMS
            return STUDENT_TERMS;
          case 2: // STUDENT_TERMS_FLAGS
            return STUDENT_TERMS_FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_TERMS, new org.apache.thrift.meta_data.FieldMetaData("studentTerms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.STUDENT_TERMS_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("studentTermsFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStudent_args.class, metaDataMap);
    }

    public updateStudent_args() {
    }

    public updateStudent_args(
      List<String> studentTerms,
      List<Boolean> studentTermsFlags)
    {
      this();
      this.studentTerms = studentTerms;
      this.studentTermsFlags = studentTermsFlags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStudent_args(updateStudent_args other) {
      if (other.isSetStudentTerms()) {
        List<String> __this__studentTerms = new ArrayList<String>();
        for (String other_element : other.studentTerms) {
          __this__studentTerms.add(other_element);
        }
        this.studentTerms = __this__studentTerms;
      }
      if (other.isSetStudentTermsFlags()) {
        List<Boolean> __this__studentTermsFlags = new ArrayList<Boolean>();
        for (Boolean other_element : other.studentTermsFlags) {
          __this__studentTermsFlags.add(other_element);
        }
        this.studentTermsFlags = __this__studentTermsFlags;
      }
    }

    public updateStudent_args deepCopy() {
      return new updateStudent_args(this);
    }

    @Override
    public void clear() {
      this.studentTerms = null;
      this.studentTermsFlags = null;
    }

    public int getStudentTermsSize() {
      return (this.studentTerms == null) ? 0 : this.studentTerms.size();
    }

    public java.util.Iterator<String> getStudentTermsIterator() {
      return (this.studentTerms == null) ? null : this.studentTerms.iterator();
    }

    public void addToStudentTerms(String elem) {
      if (this.studentTerms == null) {
        this.studentTerms = new ArrayList<String>();
      }
      this.studentTerms.add(elem);
    }

    public List<String> getStudentTerms() {
      return this.studentTerms;
    }

    public updateStudent_args setStudentTerms(List<String> studentTerms) {
      this.studentTerms = studentTerms;
      return this;
    }

    public void unsetStudentTerms() {
      this.studentTerms = null;
    }

    /** Returns true if field studentTerms is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentTerms() {
      return this.studentTerms != null;
    }

    public void setStudentTermsIsSet(boolean value) {
      if (!value) {
        this.studentTerms = null;
      }
    }

    public int getStudentTermsFlagsSize() {
      return (this.studentTermsFlags == null) ? 0 : this.studentTermsFlags.size();
    }

    public java.util.Iterator<Boolean> getStudentTermsFlagsIterator() {
      return (this.studentTermsFlags == null) ? null : this.studentTermsFlags.iterator();
    }

    public void addToStudentTermsFlags(boolean elem) {
      if (this.studentTermsFlags == null) {
        this.studentTermsFlags = new ArrayList<Boolean>();
      }
      this.studentTermsFlags.add(elem);
    }

    public List<Boolean> getStudentTermsFlags() {
      return this.studentTermsFlags;
    }

    public updateStudent_args setStudentTermsFlags(List<Boolean> studentTermsFlags) {
      this.studentTermsFlags = studentTermsFlags;
      return this;
    }

    public void unsetStudentTermsFlags() {
      this.studentTermsFlags = null;
    }

    /** Returns true if field studentTermsFlags is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentTermsFlags() {
      return this.studentTermsFlags != null;
    }

    public void setStudentTermsFlagsIsSet(boolean value) {
      if (!value) {
        this.studentTermsFlags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_TERMS:
        if (value == null) {
          unsetStudentTerms();
        } else {
          setStudentTerms((List<String>)value);
        }
        break;

      case STUDENT_TERMS_FLAGS:
        if (value == null) {
          unsetStudentTermsFlags();
        } else {
          setStudentTermsFlags((List<Boolean>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_TERMS:
        return getStudentTerms();

      case STUDENT_TERMS_FLAGS:
        return getStudentTermsFlags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_TERMS:
        return isSetStudentTerms();
      case STUDENT_TERMS_FLAGS:
        return isSetStudentTermsFlags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStudent_args)
        return this.equals((updateStudent_args)that);
      return false;
    }

    public boolean equals(updateStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentTerms = true && this.isSetStudentTerms();
      boolean that_present_studentTerms = true && that.isSetStudentTerms();
      if (this_present_studentTerms || that_present_studentTerms) {
        if (!(this_present_studentTerms && that_present_studentTerms))
          return false;
        if (!this.studentTerms.equals(that.studentTerms))
          return false;
      }

      boolean this_present_studentTermsFlags = true && this.isSetStudentTermsFlags();
      boolean that_present_studentTermsFlags = true && that.isSetStudentTermsFlags();
      if (this_present_studentTermsFlags || that_present_studentTermsFlags) {
        if (!(this_present_studentTermsFlags && that_present_studentTermsFlags))
          return false;
        if (!this.studentTermsFlags.equals(that.studentTermsFlags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStudent_args typedOther = (updateStudent_args)other;

      lastComparison = Boolean.valueOf(isSetStudentTerms()).compareTo(typedOther.isSetStudentTerms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentTerms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentTerms, typedOther.studentTerms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStudentTermsFlags()).compareTo(typedOther.isSetStudentTermsFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentTermsFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentTermsFlags, typedOther.studentTermsFlags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStudent_args(");
      boolean first = true;

      sb.append("studentTerms:");
      if (this.studentTerms == null) {
        sb.append("null");
      } else {
        sb.append(this.studentTerms);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("studentTermsFlags:");
      if (this.studentTermsFlags == null) {
        sb.append("null");
      } else {
        sb.append(this.studentTermsFlags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStudent_argsStandardSchemeFactory implements SchemeFactory {
      public updateStudent_argsStandardScheme getScheme() {
        return new updateStudent_argsStandardScheme();
      }
    }

    private static class updateStudent_argsStandardScheme extends StandardScheme<updateStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_TERMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.studentTerms = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.studentTerms.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setStudentTermsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STUDENT_TERMS_FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                  struct.studentTermsFlags = new ArrayList<Boolean>(_list19.size);
                  for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                  {
                    boolean _elem21; // required
                    _elem21 = iprot.readBool();
                    struct.studentTermsFlags.add(_elem21);
                  }
                  iprot.readListEnd();
                }
                struct.setStudentTermsFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentTerms != null) {
          oprot.writeFieldBegin(STUDENT_TERMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.studentTerms.size()));
            for (String _iter22 : struct.studentTerms)
            {
              oprot.writeString(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.studentTermsFlags != null) {
          oprot.writeFieldBegin(STUDENT_TERMS_FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.studentTermsFlags.size()));
            for (boolean _iter23 : struct.studentTermsFlags)
            {
              oprot.writeBool(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStudent_argsTupleSchemeFactory implements SchemeFactory {
      public updateStudent_argsTupleScheme getScheme() {
        return new updateStudent_argsTupleScheme();
      }
    }

    private static class updateStudent_argsTupleScheme extends TupleScheme<updateStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentTerms()) {
          optionals.set(0);
        }
        if (struct.isSetStudentTermsFlags()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudentTerms()) {
          {
            oprot.writeI32(struct.studentTerms.size());
            for (String _iter24 : struct.studentTerms)
            {
              oprot.writeString(_iter24);
            }
          }
        }
        if (struct.isSetStudentTermsFlags()) {
          {
            oprot.writeI32(struct.studentTermsFlags.size());
            for (boolean _iter25 : struct.studentTermsFlags)
            {
              oprot.writeBool(_iter25);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.studentTerms = new ArrayList<String>(_list26.size);
            for (int _i27 = 0; _i27 < _list26.size; ++_i27)
            {
              String _elem28; // required
              _elem28 = iprot.readString();
              struct.studentTerms.add(_elem28);
            }
          }
          struct.setStudentTermsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            struct.studentTermsFlags = new ArrayList<Boolean>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              boolean _elem31; // required
              _elem31 = iprot.readBool();
              struct.studentTermsFlags.add(_elem31);
            }
          }
          struct.setStudentTermsFlagsIsSet(true);
        }
      }
    }

  }

  public static class updateStudent_result implements org.apache.thrift.TBase<updateStudent_result, updateStudent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStudent_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStudent_result.class, metaDataMap);
    }

    public updateStudent_result() {
    }

    public updateStudent_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStudent_result(updateStudent_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateStudent_result deepCopy() {
      return new updateStudent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateStudent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStudent_result)
        return this.equals((updateStudent_result)that);
      return false;
    }

    public boolean equals(updateStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStudent_result typedOther = (updateStudent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStudent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStudent_resultStandardSchemeFactory implements SchemeFactory {
      public updateStudent_resultStandardScheme getScheme() {
        return new updateStudent_resultStandardScheme();
      }
    }

    private static class updateStudent_resultStandardScheme extends StandardScheme<updateStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStudent_resultTupleSchemeFactory implements SchemeFactory {
      public updateStudent_resultTupleScheme getScheme() {
        return new updateStudent_resultTupleScheme();
      }
    }

    private static class updateStudent_resultTupleScheme extends TupleScheme<updateStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findStudents_args implements org.apache.thrift.TBase<findStudents_args, findStudents_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudents_args");

    private static final org.apache.thrift.protocol.TField STUDENT_TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("studentTerms", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField STUDENT_TERMS_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("studentTermsFlags", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStudents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStudents_argsTupleSchemeFactory());
    }

    public List<String> studentTerms; // required
    public List<Boolean> studentTermsFlags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_TERMS((short)1, "studentTerms"),
      STUDENT_TERMS_FLAGS((short)2, "studentTermsFlags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_TERMS
            return STUDENT_TERMS;
          case 2: // STUDENT_TERMS_FLAGS
            return STUDENT_TERMS_FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_TERMS, new org.apache.thrift.meta_data.FieldMetaData("studentTerms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.STUDENT_TERMS_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("studentTermsFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudents_args.class, metaDataMap);
    }

    public findStudents_args() {
    }

    public findStudents_args(
      List<String> studentTerms,
      List<Boolean> studentTermsFlags)
    {
      this();
      this.studentTerms = studentTerms;
      this.studentTermsFlags = studentTermsFlags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudents_args(findStudents_args other) {
      if (other.isSetStudentTerms()) {
        List<String> __this__studentTerms = new ArrayList<String>();
        for (String other_element : other.studentTerms) {
          __this__studentTerms.add(other_element);
        }
        this.studentTerms = __this__studentTerms;
      }
      if (other.isSetStudentTermsFlags()) {
        List<Boolean> __this__studentTermsFlags = new ArrayList<Boolean>();
        for (Boolean other_element : other.studentTermsFlags) {
          __this__studentTermsFlags.add(other_element);
        }
        this.studentTermsFlags = __this__studentTermsFlags;
      }
    }

    public findStudents_args deepCopy() {
      return new findStudents_args(this);
    }

    @Override
    public void clear() {
      this.studentTerms = null;
      this.studentTermsFlags = null;
    }

    public int getStudentTermsSize() {
      return (this.studentTerms == null) ? 0 : this.studentTerms.size();
    }

    public java.util.Iterator<String> getStudentTermsIterator() {
      return (this.studentTerms == null) ? null : this.studentTerms.iterator();
    }

    public void addToStudentTerms(String elem) {
      if (this.studentTerms == null) {
        this.studentTerms = new ArrayList<String>();
      }
      this.studentTerms.add(elem);
    }

    public List<String> getStudentTerms() {
      return this.studentTerms;
    }

    public findStudents_args setStudentTerms(List<String> studentTerms) {
      this.studentTerms = studentTerms;
      return this;
    }

    public void unsetStudentTerms() {
      this.studentTerms = null;
    }

    /** Returns true if field studentTerms is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentTerms() {
      return this.studentTerms != null;
    }

    public void setStudentTermsIsSet(boolean value) {
      if (!value) {
        this.studentTerms = null;
      }
    }

    public int getStudentTermsFlagsSize() {
      return (this.studentTermsFlags == null) ? 0 : this.studentTermsFlags.size();
    }

    public java.util.Iterator<Boolean> getStudentTermsFlagsIterator() {
      return (this.studentTermsFlags == null) ? null : this.studentTermsFlags.iterator();
    }

    public void addToStudentTermsFlags(boolean elem) {
      if (this.studentTermsFlags == null) {
        this.studentTermsFlags = new ArrayList<Boolean>();
      }
      this.studentTermsFlags.add(elem);
    }

    public List<Boolean> getStudentTermsFlags() {
      return this.studentTermsFlags;
    }

    public findStudents_args setStudentTermsFlags(List<Boolean> studentTermsFlags) {
      this.studentTermsFlags = studentTermsFlags;
      return this;
    }

    public void unsetStudentTermsFlags() {
      this.studentTermsFlags = null;
    }

    /** Returns true if field studentTermsFlags is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentTermsFlags() {
      return this.studentTermsFlags != null;
    }

    public void setStudentTermsFlagsIsSet(boolean value) {
      if (!value) {
        this.studentTermsFlags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_TERMS:
        if (value == null) {
          unsetStudentTerms();
        } else {
          setStudentTerms((List<String>)value);
        }
        break;

      case STUDENT_TERMS_FLAGS:
        if (value == null) {
          unsetStudentTermsFlags();
        } else {
          setStudentTermsFlags((List<Boolean>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_TERMS:
        return getStudentTerms();

      case STUDENT_TERMS_FLAGS:
        return getStudentTermsFlags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_TERMS:
        return isSetStudentTerms();
      case STUDENT_TERMS_FLAGS:
        return isSetStudentTermsFlags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudents_args)
        return this.equals((findStudents_args)that);
      return false;
    }

    public boolean equals(findStudents_args that) {
      if (that == null)
        return false;

      boolean this_present_studentTerms = true && this.isSetStudentTerms();
      boolean that_present_studentTerms = true && that.isSetStudentTerms();
      if (this_present_studentTerms || that_present_studentTerms) {
        if (!(this_present_studentTerms && that_present_studentTerms))
          return false;
        if (!this.studentTerms.equals(that.studentTerms))
          return false;
      }

      boolean this_present_studentTermsFlags = true && this.isSetStudentTermsFlags();
      boolean that_present_studentTermsFlags = true && that.isSetStudentTermsFlags();
      if (this_present_studentTermsFlags || that_present_studentTermsFlags) {
        if (!(this_present_studentTermsFlags && that_present_studentTermsFlags))
          return false;
        if (!this.studentTermsFlags.equals(that.studentTermsFlags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStudents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStudents_args typedOther = (findStudents_args)other;

      lastComparison = Boolean.valueOf(isSetStudentTerms()).compareTo(typedOther.isSetStudentTerms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentTerms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentTerms, typedOther.studentTerms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStudentTermsFlags()).compareTo(typedOther.isSetStudentTermsFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentTermsFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentTermsFlags, typedOther.studentTermsFlags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStudents_args(");
      boolean first = true;

      sb.append("studentTerms:");
      if (this.studentTerms == null) {
        sb.append("null");
      } else {
        sb.append(this.studentTerms);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("studentTermsFlags:");
      if (this.studentTermsFlags == null) {
        sb.append("null");
      } else {
        sb.append(this.studentTermsFlags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudents_argsStandardSchemeFactory implements SchemeFactory {
      public findStudents_argsStandardScheme getScheme() {
        return new findStudents_argsStandardScheme();
      }
    }

    private static class findStudents_argsStandardScheme extends StandardScheme<findStudents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_TERMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.studentTerms = new ArrayList<String>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    String _elem34; // required
                    _elem34 = iprot.readString();
                    struct.studentTerms.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setStudentTermsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STUDENT_TERMS_FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                  struct.studentTermsFlags = new ArrayList<Boolean>(_list35.size);
                  for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                  {
                    boolean _elem37; // required
                    _elem37 = iprot.readBool();
                    struct.studentTermsFlags.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setStudentTermsFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentTerms != null) {
          oprot.writeFieldBegin(STUDENT_TERMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.studentTerms.size()));
            for (String _iter38 : struct.studentTerms)
            {
              oprot.writeString(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.studentTermsFlags != null) {
          oprot.writeFieldBegin(STUDENT_TERMS_FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.studentTermsFlags.size()));
            for (boolean _iter39 : struct.studentTermsFlags)
            {
              oprot.writeBool(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudents_argsTupleSchemeFactory implements SchemeFactory {
      public findStudents_argsTupleScheme getScheme() {
        return new findStudents_argsTupleScheme();
      }
    }

    private static class findStudents_argsTupleScheme extends TupleScheme<findStudents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentTerms()) {
          optionals.set(0);
        }
        if (struct.isSetStudentTermsFlags()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudentTerms()) {
          {
            oprot.writeI32(struct.studentTerms.size());
            for (String _iter40 : struct.studentTerms)
            {
              oprot.writeString(_iter40);
            }
          }
        }
        if (struct.isSetStudentTermsFlags()) {
          {
            oprot.writeI32(struct.studentTermsFlags.size());
            for (boolean _iter41 : struct.studentTermsFlags)
            {
              oprot.writeBool(_iter41);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.studentTerms = new ArrayList<String>(_list42.size);
            for (int _i43 = 0; _i43 < _list42.size; ++_i43)
            {
              String _elem44; // required
              _elem44 = iprot.readString();
              struct.studentTerms.add(_elem44);
            }
          }
          struct.setStudentTermsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            struct.studentTermsFlags = new ArrayList<Boolean>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              boolean _elem47; // required
              _elem47 = iprot.readBool();
              struct.studentTermsFlags.add(_elem47);
            }
          }
          struct.setStudentTermsFlagsIsSet(true);
        }
      }
    }

  }

  public static class findStudents_result implements org.apache.thrift.TBase<findStudents_result, findStudents_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findStudents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findStudents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findStudents_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findStudents_result.class, metaDataMap);
    }

    public findStudents_result() {
    }

    public findStudents_result(
      List<List<String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findStudents_result(findStudents_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>();
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>();
          for (String other_element_element : other_element) {
            __this__success_copy.add(other_element_element);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public findStudents_result deepCopy() {
      return new findStudents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public findStudents_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findStudents_result)
        return this.equals((findStudents_result)that);
      return false;
    }

    public boolean equals(findStudents_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findStudents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findStudents_result typedOther = (findStudents_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findStudents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findStudents_resultStandardSchemeFactory implements SchemeFactory {
      public findStudents_resultStandardScheme getScheme() {
        return new findStudents_resultStandardScheme();
      }
    }

    private static class findStudents_resultStandardScheme extends StandardScheme<findStudents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findStudents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    List<String> _elem50; // required
                    {
                      org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                      _elem50 = new ArrayList<String>(_list51.size);
                      for (int _i52 = 0; _i52 < _list51.size; ++_i52)
                      {
                        String _elem53; // required
                        _elem53 = iprot.readString();
                        _elem50.add(_elem53);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findStudents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter54 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter54.size()));
                for (String _iter55 : _iter54)
                {
                  oprot.writeString(_iter55);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findStudents_resultTupleSchemeFactory implements SchemeFactory {
      public findStudents_resultTupleScheme getScheme() {
        return new findStudents_resultTupleScheme();
      }
    }

    private static class findStudents_resultTupleScheme extends TupleScheme<findStudents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findStudents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter56 : struct.success)
            {
              {
                oprot.writeI32(_iter56.size());
                for (String _iter57 : _iter56)
                {
                  oprot.writeString(_iter57);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findStudents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list58.size);
            for (int _i59 = 0; _i59 < _list58.size; ++_i59)
            {
              List<String> _elem60; // required
              {
                org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem60 = new ArrayList<String>(_list61.size);
                for (int _i62 = 0; _i62 < _list61.size; ++_i62)
                {
                  String _elem63; // required
                  _elem63 = iprot.readString();
                  _elem60.add(_elem63);
                }
              }
              struct.success.add(_elem60);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findRemoveStudents_args implements org.apache.thrift.TBase<findRemoveStudents_args, findRemoveStudents_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRemoveStudents_args");

    private static final org.apache.thrift.protocol.TField STUDENT_TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("studentTerms", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField STUDENT_TERMS_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("studentTermsFlags", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRemoveStudents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRemoveStudents_argsTupleSchemeFactory());
    }

    public List<String> studentTerms; // required
    public List<Boolean> studentTermsFlags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_TERMS((short)1, "studentTerms"),
      STUDENT_TERMS_FLAGS((short)2, "studentTermsFlags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_TERMS
            return STUDENT_TERMS;
          case 2: // STUDENT_TERMS_FLAGS
            return STUDENT_TERMS_FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_TERMS, new org.apache.thrift.meta_data.FieldMetaData("studentTerms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.STUDENT_TERMS_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("studentTermsFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRemoveStudents_args.class, metaDataMap);
    }

    public findRemoveStudents_args() {
    }

    public findRemoveStudents_args(
      List<String> studentTerms,
      List<Boolean> studentTermsFlags)
    {
      this();
      this.studentTerms = studentTerms;
      this.studentTermsFlags = studentTermsFlags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRemoveStudents_args(findRemoveStudents_args other) {
      if (other.isSetStudentTerms()) {
        List<String> __this__studentTerms = new ArrayList<String>();
        for (String other_element : other.studentTerms) {
          __this__studentTerms.add(other_element);
        }
        this.studentTerms = __this__studentTerms;
      }
      if (other.isSetStudentTermsFlags()) {
        List<Boolean> __this__studentTermsFlags = new ArrayList<Boolean>();
        for (Boolean other_element : other.studentTermsFlags) {
          __this__studentTermsFlags.add(other_element);
        }
        this.studentTermsFlags = __this__studentTermsFlags;
      }
    }

    public findRemoveStudents_args deepCopy() {
      return new findRemoveStudents_args(this);
    }

    @Override
    public void clear() {
      this.studentTerms = null;
      this.studentTermsFlags = null;
    }

    public int getStudentTermsSize() {
      return (this.studentTerms == null) ? 0 : this.studentTerms.size();
    }

    public java.util.Iterator<String> getStudentTermsIterator() {
      return (this.studentTerms == null) ? null : this.studentTerms.iterator();
    }

    public void addToStudentTerms(String elem) {
      if (this.studentTerms == null) {
        this.studentTerms = new ArrayList<String>();
      }
      this.studentTerms.add(elem);
    }

    public List<String> getStudentTerms() {
      return this.studentTerms;
    }

    public findRemoveStudents_args setStudentTerms(List<String> studentTerms) {
      this.studentTerms = studentTerms;
      return this;
    }

    public void unsetStudentTerms() {
      this.studentTerms = null;
    }

    /** Returns true if field studentTerms is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentTerms() {
      return this.studentTerms != null;
    }

    public void setStudentTermsIsSet(boolean value) {
      if (!value) {
        this.studentTerms = null;
      }
    }

    public int getStudentTermsFlagsSize() {
      return (this.studentTermsFlags == null) ? 0 : this.studentTermsFlags.size();
    }

    public java.util.Iterator<Boolean> getStudentTermsFlagsIterator() {
      return (this.studentTermsFlags == null) ? null : this.studentTermsFlags.iterator();
    }

    public void addToStudentTermsFlags(boolean elem) {
      if (this.studentTermsFlags == null) {
        this.studentTermsFlags = new ArrayList<Boolean>();
      }
      this.studentTermsFlags.add(elem);
    }

    public List<Boolean> getStudentTermsFlags() {
      return this.studentTermsFlags;
    }

    public findRemoveStudents_args setStudentTermsFlags(List<Boolean> studentTermsFlags) {
      this.studentTermsFlags = studentTermsFlags;
      return this;
    }

    public void unsetStudentTermsFlags() {
      this.studentTermsFlags = null;
    }

    /** Returns true if field studentTermsFlags is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentTermsFlags() {
      return this.studentTermsFlags != null;
    }

    public void setStudentTermsFlagsIsSet(boolean value) {
      if (!value) {
        this.studentTermsFlags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_TERMS:
        if (value == null) {
          unsetStudentTerms();
        } else {
          setStudentTerms((List<String>)value);
        }
        break;

      case STUDENT_TERMS_FLAGS:
        if (value == null) {
          unsetStudentTermsFlags();
        } else {
          setStudentTermsFlags((List<Boolean>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_TERMS:
        return getStudentTerms();

      case STUDENT_TERMS_FLAGS:
        return getStudentTermsFlags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_TERMS:
        return isSetStudentTerms();
      case STUDENT_TERMS_FLAGS:
        return isSetStudentTermsFlags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRemoveStudents_args)
        return this.equals((findRemoveStudents_args)that);
      return false;
    }

    public boolean equals(findRemoveStudents_args that) {
      if (that == null)
        return false;

      boolean this_present_studentTerms = true && this.isSetStudentTerms();
      boolean that_present_studentTerms = true && that.isSetStudentTerms();
      if (this_present_studentTerms || that_present_studentTerms) {
        if (!(this_present_studentTerms && that_present_studentTerms))
          return false;
        if (!this.studentTerms.equals(that.studentTerms))
          return false;
      }

      boolean this_present_studentTermsFlags = true && this.isSetStudentTermsFlags();
      boolean that_present_studentTermsFlags = true && that.isSetStudentTermsFlags();
      if (this_present_studentTermsFlags || that_present_studentTermsFlags) {
        if (!(this_present_studentTermsFlags && that_present_studentTermsFlags))
          return false;
        if (!this.studentTermsFlags.equals(that.studentTermsFlags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRemoveStudents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRemoveStudents_args typedOther = (findRemoveStudents_args)other;

      lastComparison = Boolean.valueOf(isSetStudentTerms()).compareTo(typedOther.isSetStudentTerms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentTerms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentTerms, typedOther.studentTerms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStudentTermsFlags()).compareTo(typedOther.isSetStudentTermsFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentTermsFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentTermsFlags, typedOther.studentTermsFlags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRemoveStudents_args(");
      boolean first = true;

      sb.append("studentTerms:");
      if (this.studentTerms == null) {
        sb.append("null");
      } else {
        sb.append(this.studentTerms);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("studentTermsFlags:");
      if (this.studentTermsFlags == null) {
        sb.append("null");
      } else {
        sb.append(this.studentTermsFlags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRemoveStudents_argsStandardSchemeFactory implements SchemeFactory {
      public findRemoveStudents_argsStandardScheme getScheme() {
        return new findRemoveStudents_argsStandardScheme();
      }
    }

    private static class findRemoveStudents_argsStandardScheme extends StandardScheme<findRemoveStudents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRemoveStudents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_TERMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.studentTerms = new ArrayList<String>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    String _elem66; // required
                    _elem66 = iprot.readString();
                    struct.studentTerms.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setStudentTermsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STUDENT_TERMS_FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                  struct.studentTermsFlags = new ArrayList<Boolean>(_list67.size);
                  for (int _i68 = 0; _i68 < _list67.size; ++_i68)
                  {
                    boolean _elem69; // required
                    _elem69 = iprot.readBool();
                    struct.studentTermsFlags.add(_elem69);
                  }
                  iprot.readListEnd();
                }
                struct.setStudentTermsFlagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRemoveStudents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentTerms != null) {
          oprot.writeFieldBegin(STUDENT_TERMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.studentTerms.size()));
            for (String _iter70 : struct.studentTerms)
            {
              oprot.writeString(_iter70);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.studentTermsFlags != null) {
          oprot.writeFieldBegin(STUDENT_TERMS_FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.studentTermsFlags.size()));
            for (boolean _iter71 : struct.studentTermsFlags)
            {
              oprot.writeBool(_iter71);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRemoveStudents_argsTupleSchemeFactory implements SchemeFactory {
      public findRemoveStudents_argsTupleScheme getScheme() {
        return new findRemoveStudents_argsTupleScheme();
      }
    }

    private static class findRemoveStudents_argsTupleScheme extends TupleScheme<findRemoveStudents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRemoveStudents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStudentTerms()) {
          optionals.set(0);
        }
        if (struct.isSetStudentTermsFlags()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStudentTerms()) {
          {
            oprot.writeI32(struct.studentTerms.size());
            for (String _iter72 : struct.studentTerms)
            {
              oprot.writeString(_iter72);
            }
          }
        }
        if (struct.isSetStudentTermsFlags()) {
          {
            oprot.writeI32(struct.studentTermsFlags.size());
            for (boolean _iter73 : struct.studentTermsFlags)
            {
              oprot.writeBool(_iter73);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRemoveStudents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.studentTerms = new ArrayList<String>(_list74.size);
            for (int _i75 = 0; _i75 < _list74.size; ++_i75)
            {
              String _elem76; // required
              _elem76 = iprot.readString();
              struct.studentTerms.add(_elem76);
            }
          }
          struct.setStudentTermsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            struct.studentTermsFlags = new ArrayList<Boolean>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              boolean _elem79; // required
              _elem79 = iprot.readBool();
              struct.studentTermsFlags.add(_elem79);
            }
          }
          struct.setStudentTermsFlagsIsSet(true);
        }
      }
    }

  }

  public static class findRemoveStudents_result implements org.apache.thrift.TBase<findRemoveStudents_result, findRemoveStudents_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRemoveStudents_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRemoveStudents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRemoveStudents_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRemoveStudents_result.class, metaDataMap);
    }

    public findRemoveStudents_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRemoveStudents_result(findRemoveStudents_result other) {
    }

    public findRemoveStudents_result deepCopy() {
      return new findRemoveStudents_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRemoveStudents_result)
        return this.equals((findRemoveStudents_result)that);
      return false;
    }

    public boolean equals(findRemoveStudents_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findRemoveStudents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findRemoveStudents_result typedOther = (findRemoveStudents_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRemoveStudents_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRemoveStudents_resultStandardSchemeFactory implements SchemeFactory {
      public findRemoveStudents_resultStandardScheme getScheme() {
        return new findRemoveStudents_resultStandardScheme();
      }
    }

    private static class findRemoveStudents_resultStandardScheme extends StandardScheme<findRemoveStudents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRemoveStudents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRemoveStudents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRemoveStudents_resultTupleSchemeFactory implements SchemeFactory {
      public findRemoveStudents_resultTupleScheme getScheme() {
        return new findRemoveStudents_resultTupleScheme();
      }
    }

    private static class findRemoveStudents_resultTupleScheme extends TupleScheme<findRemoveStudents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRemoveStudents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRemoveStudents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getStudentCount_args implements org.apache.thrift.TBase<getStudentCount_args, getStudentCount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentCount_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentCount_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentCount_args.class, metaDataMap);
    }

    public getStudentCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentCount_args(getStudentCount_args other) {
    }

    public getStudentCount_args deepCopy() {
      return new getStudentCount_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentCount_args)
        return this.equals((getStudentCount_args)that);
      return false;
    }

    public boolean equals(getStudentCount_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStudentCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStudentCount_args typedOther = (getStudentCount_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentCount_argsStandardSchemeFactory implements SchemeFactory {
      public getStudentCount_argsStandardScheme getScheme() {
        return new getStudentCount_argsStandardScheme();
      }
    }

    private static class getStudentCount_argsStandardScheme extends StandardScheme<getStudentCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentCount_argsTupleSchemeFactory implements SchemeFactory {
      public getStudentCount_argsTupleScheme getScheme() {
        return new getStudentCount_argsTupleScheme();
      }
    }

    private static class getStudentCount_argsTupleScheme extends TupleScheme<getStudentCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getStudentCount_result implements org.apache.thrift.TBase<getStudentCount_result, getStudentCount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentCount_result.class, metaDataMap);
    }

    public getStudentCount_result() {
    }

    public getStudentCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentCount_result(getStudentCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getStudentCount_result deepCopy() {
      return new getStudentCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getStudentCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentCount_result)
        return this.equals((getStudentCount_result)that);
      return false;
    }

    public boolean equals(getStudentCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStudentCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStudentCount_result typedOther = (getStudentCount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentCount_resultStandardSchemeFactory implements SchemeFactory {
      public getStudentCount_resultStandardScheme getScheme() {
        return new getStudentCount_resultStandardScheme();
      }
    }

    private static class getStudentCount_resultStandardScheme extends StandardScheme<getStudentCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentCount_resultTupleSchemeFactory implements SchemeFactory {
      public getStudentCount_resultTupleScheme getScheme() {
        return new getStudentCount_resultTupleScheme();
      }
    }

    private static class getStudentCount_resultTupleScheme extends TupleScheme<getStudentCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStudentAtIndex_args implements org.apache.thrift.TBase<getStudentAtIndex_args, getStudentAtIndex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentAtIndex_args");

    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentAtIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentAtIndex_argsTupleSchemeFactory());
    }

    public int index; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDEX((short)1, "index");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDEX
            return INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentAtIndex_args.class, metaDataMap);
    }

    public getStudentAtIndex_args() {
    }

    public getStudentAtIndex_args(
      int index)
    {
      this();
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentAtIndex_args(getStudentAtIndex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.index = other.index;
    }

    public getStudentAtIndex_args deepCopy() {
      return new getStudentAtIndex_args(this);
    }

    @Override
    public void clear() {
      setIndexIsSet(false);
      this.index = 0;
    }

    public int getIndex() {
      return this.index;
    }

    public getStudentAtIndex_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INDEX:
        return Integer.valueOf(getIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INDEX:
        return isSetIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentAtIndex_args)
        return this.equals((getStudentAtIndex_args)that);
      return false;
    }

    public boolean equals(getStudentAtIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStudentAtIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStudentAtIndex_args typedOther = (getStudentAtIndex_args)other;

      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentAtIndex_args(");
      boolean first = true;

      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentAtIndex_argsStandardSchemeFactory implements SchemeFactory {
      public getStudentAtIndex_argsStandardScheme getScheme() {
        return new getStudentAtIndex_argsStandardScheme();
      }
    }

    private static class getStudentAtIndex_argsStandardScheme extends StandardScheme<getStudentAtIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentAtIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentAtIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentAtIndex_argsTupleSchemeFactory implements SchemeFactory {
      public getStudentAtIndex_argsTupleScheme getScheme() {
        return new getStudentAtIndex_argsTupleScheme();
      }
    }

    private static class getStudentAtIndex_argsTupleScheme extends TupleScheme<getStudentAtIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentAtIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIndex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentAtIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
      }
    }

  }

  public static class getStudentAtIndex_result implements org.apache.thrift.TBase<getStudentAtIndex_result, getStudentAtIndex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentAtIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentAtIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentAtIndex_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentAtIndex_result.class, metaDataMap);
    }

    public getStudentAtIndex_result() {
    }

    public getStudentAtIndex_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentAtIndex_result(getStudentAtIndex_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getStudentAtIndex_result deepCopy() {
      return new getStudentAtIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getStudentAtIndex_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentAtIndex_result)
        return this.equals((getStudentAtIndex_result)that);
      return false;
    }

    public boolean equals(getStudentAtIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStudentAtIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStudentAtIndex_result typedOther = (getStudentAtIndex_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentAtIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentAtIndex_resultStandardSchemeFactory implements SchemeFactory {
      public getStudentAtIndex_resultStandardScheme getScheme() {
        return new getStudentAtIndex_resultStandardScheme();
      }
    }

    private static class getStudentAtIndex_resultStandardScheme extends StandardScheme<getStudentAtIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentAtIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    String _elem82; // required
                    _elem82 = iprot.readString();
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentAtIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter83 : struct.success)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentAtIndex_resultTupleSchemeFactory implements SchemeFactory {
      public getStudentAtIndex_resultTupleScheme getScheme() {
        return new getStudentAtIndex_resultTupleScheme();
      }
    }

    private static class getStudentAtIndex_resultTupleScheme extends TupleScheme<getStudentAtIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentAtIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter84 : struct.success)
            {
              oprot.writeString(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentAtIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              String _elem87; // required
              _elem87 = iprot.readString();
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveChanges_args implements org.apache.thrift.TBase<saveChanges_args, saveChanges_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveChanges_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveChanges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveChanges_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveChanges_args.class, metaDataMap);
    }

    public saveChanges_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveChanges_args(saveChanges_args other) {
    }

    public saveChanges_args deepCopy() {
      return new saveChanges_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveChanges_args)
        return this.equals((saveChanges_args)that);
      return false;
    }

    public boolean equals(saveChanges_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveChanges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveChanges_args typedOther = (saveChanges_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveChanges_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveChanges_argsStandardSchemeFactory implements SchemeFactory {
      public saveChanges_argsStandardScheme getScheme() {
        return new saveChanges_argsStandardScheme();
      }
    }

    private static class saveChanges_argsStandardScheme extends StandardScheme<saveChanges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveChanges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveChanges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveChanges_argsTupleSchemeFactory implements SchemeFactory {
      public saveChanges_argsTupleScheme getScheme() {
        return new saveChanges_argsTupleScheme();
      }
    }

    private static class saveChanges_argsTupleScheme extends TupleScheme<saveChanges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveChanges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveChanges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveChanges_result implements org.apache.thrift.TBase<saveChanges_result, saveChanges_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveChanges_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveChanges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveChanges_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveChanges_result.class, metaDataMap);
    }

    public saveChanges_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveChanges_result(saveChanges_result other) {
    }

    public saveChanges_result deepCopy() {
      return new saveChanges_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveChanges_result)
        return this.equals((saveChanges_result)that);
      return false;
    }

    public boolean equals(saveChanges_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveChanges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveChanges_result typedOther = (saveChanges_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveChanges_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveChanges_resultStandardSchemeFactory implements SchemeFactory {
      public saveChanges_resultStandardScheme getScheme() {
        return new saveChanges_resultStandardScheme();
      }
    }

    private static class saveChanges_resultStandardScheme extends StandardScheme<saveChanges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveChanges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveChanges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveChanges_resultTupleSchemeFactory implements SchemeFactory {
      public saveChanges_resultTupleScheme getScheme() {
        return new saveChanges_resultTupleScheme();
      }
    }

    private static class saveChanges_resultTupleScheme extends TupleScheme<saveChanges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveChanges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveChanges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
